} else {
alpha[i] = alpha[i-1]
beta[i] = beta[i-1]
}
}
list(alpha = alpha, beta = beta)
}
draws = Metropolis_bioassay()
ggplot(data.frame(draws), aes(x = alpha, y = beta)) + geom_point(alpha = 0.1) + theme_bw() +
# Add contour lines
stat_density2d(aes(fill = ..after_stat(level)..), geom = "polygon", alpha = 0.1, bins = 10)
Metropolis_bioassay = function(n = 10000){
# Initialize
alpha = rep(NA, n)
beta = rep(NA, n)
alpha[1] = 0
beta[1] = 10
accepted = 0
for (i in 2:n){
# Propose
alpha_propose = rnorm(1, alpha[i-1], 1)
beta_propose = rnorm(1, beta[i-1], 5)
# Acceptance ratio
ratio = density_ratio(alpha_propose, alpha[i-1], beta_propose, beta[i-1])
# Accept or reject; if ratio is greater than 1, always accept the proposal,
# if less than 1, accept with probability 'ratio'
if (runif(1) < ratio){
alpha[i] = alpha_propose
beta[i] = beta_propose
} else {
alpha[i] = alpha[i-1]
beta[i] = beta[i-1]
}
}
list(alpha = alpha, beta = beta)
}
draws = Metropolis_bioassay()
Metropolis_bioassay = function(n = 10000, sigma_a = 1, sibma_b = 5){
# Initialize
alpha = rep(NA, n)
beta = rep(NA, n)
alpha[1] = 0
beta[1] = 10
accepted = 0
for (i in 2:n){
# Propose
alpha_propose = rnorm(1, alpha[i-1], 1)
beta_propose = rnorm(1, beta[i-1], 5)
# Acceptance ratio
ratio = density_ratio(alpha_propose, alpha[i-1], beta_propose, beta[i-1])
# Accept or reject; if ratio is greater than 1, always accept the proposal,
# if less than 1, accept with probability 'ratio'
if (runif(1) < ratio){
alpha[i] = alpha_propose
beta[i] = beta_propose
} else {
alpha[i] = alpha[i-1]
beta[i] = beta[i-1]
}
}
list(alpha = alpha, beta = beta)
}
draws = Metropolis_bioassay(.,1,6)
Metropolis_bioassay = function(n = 10000, sigma_a = 1, sibma_b = 5){
# Initialize
alpha = rep(NA, n)
beta = rep(NA, n)
alpha[1] = 0
beta[1] = 10
accepted = 0
for (i in 2:n){
# Propose
alpha_propose = rnorm(1, alpha[i-1], 1)
beta_propose = rnorm(1, beta[i-1], 5)
# Acceptance ratio
ratio = density_ratio(alpha_propose, alpha[i-1], beta_propose, beta[i-1])
# Accept or reject; if ratio is greater than 1, always accept the proposal,
# if less than 1, accept with probability 'ratio'
if (runif(1) < ratio){
alpha[i] = alpha_propose
beta[i] = beta_propose
} else {
alpha[i] = alpha[i-1]
beta[i] = beta[i-1]
}
}
list(alpha = alpha, beta = beta)
}
draws = Metropolis_bioassay(..,1,6)
Metropolis_bioassay = function(n = 10000, sigma_a = 1, sibma_b = 5){
# Initialize
alpha = rep(NA, n)
beta = rep(NA, n)
alpha[1] = 0
beta[1] = 10
accepted = 0
for (i in 2:n){
# Propose
alpha_propose = rnorm(1, alpha[i-1], 1)
beta_propose = rnorm(1, beta[i-1], 5)
# Acceptance ratio
ratio = density_ratio(alpha_propose, alpha[i-1], beta_propose, beta[i-1])
# Accept or reject; if ratio is greater than 1, always accept the proposal,
# if less than 1, accept with probability 'ratio'
if (runif(1) < ratio){
alpha[i] = alpha_propose
beta[i] = beta_propose
} else {
alpha[i] = alpha[i-1]
beta[i] = beta[i-1]
}
}
list(alpha = alpha, beta = beta)
}
draws = Metropolis_bioassay(...,1,6)
Metropolis_bioassay = function(n = 10000, sigma_a = 1, sibma_b = 5){
# Initialize
alpha = rep(NA, n)
beta = rep(NA, n)
alpha[1] = 0
beta[1] = 10
accepted = 0
for (i in 2:n){
# Propose
alpha_propose = rnorm(1, alpha[i-1], 1)
beta_propose = rnorm(1, beta[i-1], 5)
# Acceptance ratio
ratio = density_ratio(alpha_propose, alpha[i-1], beta_propose, beta[i-1])
# Accept or reject; if ratio is greater than 1, always accept the proposal,
# if less than 1, accept with probability 'ratio'
if (runif(1) < ratio){
alpha[i] = alpha_propose
beta[i] = beta_propose
} else {
alpha[i] = alpha[i-1]
beta[i] = beta[i-1]
}
}
list(alpha = alpha, beta = beta)
}
draws = Metropolis_bioassay(,1,6)
hist(Metropolis_bioassay(,1,6))
draws1 = (Metropolis_bioassay(,1,5))
# plot draws
ggplot(data.frame(draws1), aes(x = alpha, y = beta)) + geom_point() + theme_bw()
draws1 = (Metropolis_bioassay(,1,5))
# plot draws
ggplot(data.frame(draws1), aes(x = alpha, y = beta), alpha = 0.1) + geom_point() + theme_bw()
draws1 = (Metropolis_bioassay(,1,5))
# plot draws
ggplot(data.frame(draws1), aes(x = alpha, y = beta) ) + geom_point(alpha = 0.1) + theme_bw()
draws2 = (Metropolis_bioassay(,2,10))
# plot draws
ggplot(data.frame(draws2), aes(x = alpha, y = beta) ) + geom_point(alpha = 0.1) + theme_bw()
draw0 = (Metropolis_bioassay(,0.1,0.5))
# plot draws
ggplot(data.frame(draw0), aes(x = alpha, y = beta) ) + geom_point(alpha = 0.1) + theme_bw()
draw3 = (Metropolis_bioassay(,5,20))
# plot draws
ggplot(data.frame(draw3), aes(x = alpha, y = beta) ) + geom_point(alpha = 0.1) + theme_bw()
remove.packages("montebayes")
library(aaltobda)
library(ggplot2)
library(montebayes) # Formatointityökaluja tms.
sigma_a = c(1,2,5,10)
sigma_b = c(2,4,10,20)
times = sapply(1:4, timeit(Metropolis_bioassay(n = 10000, sigma_a = sigma_a[i], sigma_b = sigma_b[i])))
library(aaltobda)
library(ggplot2)
library(montebayes) # Formatointityökaluja tms.
sigma_a = c(1,2,5,10)
sigma_b = c(2,4,10,20)
times = sapply(1:4, timeit(Metropolis_bioassay(n = 10000, sigma_a = sigma_a[i], sigma_b = sigma_b[i])))
remove.packages("montebayes")
library(aaltobda)
library(ggplot2)
library(bayestools) # Formatointityökaluja tms.
library(aaltobda)
library(ggplot2)
library(bayestools) # Formatointityökaluja tms.
noppa::noppa(6,20)
noppa::noppa(6,20)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
clear
flush()
clear()
flush.console()
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
set.seed(1)
set.seed(1)
noppa::noppa(6,20,T)
noppa::noppa(6,20,T)
knitr::opts_chunk$set(echo = TRUE)
library(rsstan)
library(rstan)
View(stan_model)
library(rstan)
library(ggplot2)
library(loo)
mc.cores <- parallel::detectCores()
options(mc.cores = mc.cores)
# stan data with 10 success and 20 fails
stan_data = list(N = 30, y = c(rep(1, 10), rep(0, 20)))
# sample
fit <- stan(model_code = log_model, data = stan_data, iter = 6000, chains = 4)
# stan data with 10 success and 20 fails
stan_data = list(N = 30, y = c(rep(1, 10), rep(0, 20)))
# sample
fit <- rstan::sampling(log_model, data = stan_data, chains = 4, iter = 10000)
# Extract
theta <- extract(fit)$theta
View(fit)
hist(theta)
hist(theta, freq = FALSE)
fit$theta
fit$theta
# Get the posterior mean and 95 % credible interval
mean(theta)
quantile(theta, c(0.025, 0.975))
log10(10^10)
# rhat
rhat = bayestools::rhat(theta)
# rhat
rhat = rstan::rhat(theta)
# rhat
rhat = Rstan::rhat(theta)
# rhat
rhat = rstan::Rhat(theta)
# stan data with 10 success and 20 fails
stan_data = list(N = 30, y = c(rep(1, 10), rep(0, 20)))
# sample
fit <- rstan::sampling(log_model, data = stan_data, chains = 4, iter = 10000)
# Extract
theta <- extract(fit, merge_chains = FALSE)$theta
# Extract
theta <- extract(fit)$theta
# rhat
rhat = rstan::Rhat(theta)
# Extract
theta <- extract(fit)
# rhat
rhat = rstan::Rhat(theta)
View(theta)
# Extract
theta <- extract(fit, permuted = F)$theta)
# Extract
theta <- extract(fit, permuted = F)
# rhat
rhat = rstan::Rhat(theta)
View(stan_data)
# Extract
theta <- extract(fit, permuted = F, params = "theta")
# Extract
theta <- extract(fit, permuted = F, pars = "theta")
# rhat
rhat = rstan::Rhat(theta)
theta
# Extract
theta <- extract(fit, permuted = F, pars = "theta")
# rhat
rhat = rstan::Rhat(theta)
# Extract
theta <- extract(fit, permuted = F)$theta
# Extract
theta <- extract(fit, permuted = F)
# rhat
rhat = rstan::Rhat(theta)
theta
t = as.list(theta)
View(t)
# Extract
theta <- extract(fit, permuted = FALSE, pars = "theta")
# rhat
rhat = rstan::Rhat(theta)
t = as.list(theta)
View(t)
# Extract
theta <- extract(fit, permuted = FALSE, pars = "theta")
# rhat
rhat = rstan::Rhat(theta[,,1])
aaltobda::mcse_quantile
checkmate::`%??%`(1,2)
checkmate::`%??%`(,2)
checkmate::`%??%`(,)
checkmate::`%??%`()
checkmate::`%??%`()1
checkmate::`%??%`()
checkmate::`%??%`(1)
checkmate::`%??%`(2)
checkmate::`%??%`(2,1)
checkmate::`%??%`(2,1,3)
# Get the posterior mean and 95 % credible interval
mean = mean(theta)
q = quantile(theta, c(0.025, 0.975))
cat("The posterior mean is", mean, "and the 95 % credible interval is", q[1], "to", q[2], "\n")
ggplot(data.frame(theta = theta[,,1]), aes(x = theta)) +
geom_histogram(aes(y = ..density..), binwidth = 0.05, fill = "lightblue", color = "black") +
geom_density(alpha = 0.2, fill = "lightblue") +
theme_minimal()
# Extract
theta <- extract(fit, permuted = FALSE, pars = "theta")
theta_combined <- extract(fit, permuted = TRUE, pars = "theta")
# rhat
rhat = rstan::Rhat(theta[,,1])
# Extract
theta <- extract(fit, permuted = FALSE, pars = "theta")
theta_combined <- extract(fit, permuted = TRUE, pars = "theta")
# rhat
rhat = rstan::Rhat(theta[,,1])
cat("The Rhat for theta is", rhat, "\n")
ggplot(data.frame(theta = theta_combined[,,1]), aes(x = theta)) +
geom_histogram(aes(y = ..density..), binwidth = 0.05, fill = "lightblue", color = "black") +
geom_density(alpha = 0.2, fill = "lightblue") +
theme_minimal()
View(theta_combined)
# Extract
theta <- extract(fit, permuted = FALSE, pars = "theta")
theta_combined <- extract(fit, pars = "theta")
# rhat
rhat = rstan::Rhat(theta[,,1])
cat("The Rhat for theta is", rhat, "\n")
# Plot the posterior
ggplot(data.frame(theta = theta_combined), aes(x = theta)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black") +
geom_density(alpha = 0.2, fill = "lightblue") +
labs(title = "Posterior distribution of theta", x = "theta", y = "Density") +
theme_minimal()
# Plot the posterior with mean and 95 % credible interval
ggplot(data.frame(theta = theta_combined), aes(x = theta)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black") +
geom_density(alpha = 0.2, fill = "lightblue") +
labs(title = "Posterior distribution of theta", x = "theta", y = "Density") +
geom_vline(xintercept = mean, color = "red") +
geom_vline(xintercept = q[1], color = "blue") +
geom_vline(xintercept = q[2], color = "blue")
# Plot the posterior with mean and 95 % credible interval
ggplot(data.frame(theta = theta_combined), aes(x = theta)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black") +
geom_density(alpha = 0.2, fill = "lightblue") +
labs(title = "Posterior distribution of theta", x = "theta", y = "Density") +
geom_pointrange(aes(x = mean, y = 0.5, ymin = 0, ymax = 0.5), color = "red", size = 1) +
# Plot the posterior with mean and 95 % credible interval
ggplot(data.frame(theta = theta_combined), aes(x = theta)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black") +
geom_density(alpha = 0.2, fill = "lightblue") +
labs(title = "Posterior distribution of theta", x = "theta", y = "Density") +
geom_pointrange(aes(x = mean, y = 0.5, ymin = 0, ymax = 0.5), color = "red", size = 1)
# Plot the posterior with mean and 95 % credible interval
ggplot(data.frame(theta = theta_combined), aes(x = theta)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black") +
geom_density(alpha = 0.2, fill = "lightblue") +
labs(title = "Posterior distribution of theta", x = "theta", y = "Density") +
geom_pointrange(aes(x = mean, y = 0.5, ymin = 0, ymax = 0.5), color = "red", size = 1) +
geom_vline(xintercept = q[1], color = "red", linetype = "dashed") +
geom_vline(xintercept = q[2], color = "red", linetype = "dashed")
# Plot the posterior with mean and 95 % credible interval
ggplot(data.frame(theta = theta_combined), aes(x = theta)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black") +
geom_density(alpha = 0.2, fill = "lightblue") +
labs(title = "Posterior distribution of theta", x = "theta", y = "Density") +
geom_vline(xintercept = q[1], color = "red", linetype = "dashed") +
geom_vline(xintercept = q[2], color = "red", linetype = "dashed") +
geom_point(aes(x = mean, y = 0), color = "red", size = 3) +
# Plot the posterior with mean and 95 % credible interval
ggplot(data.frame(theta = theta_combined), aes(x = theta)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black") +
geom_density(alpha = 0.2, fill = "lightblue") +
labs(title = "Posterior distribution of theta", x = "theta", y = "Density") +
geom_vline(xintercept = q[1], color = "red", linetype = "dashed") +
geom_vline(xintercept = q[2], color = "red", linetype = "dashed") +
geom_point(aes(x = mean, y = 0), color = "red", size = 3)
# Plot the posterior with mean and 95 % credible interval
ggplot(data.frame(theta = theta_combined), aes(x = theta)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black") +
geom_density(alpha = 0.2, fill = "lightblue") +
labs(title = "Posterior distribution of theta", x = "theta", y = "Density") +
geom_vline(xintercept = q[1], color = "red", linetype = "dashed") +
geom_vline(xintercept = q[2], color = "red", linetype = "dashed") +
geom_point(aes(x = mean, y = 0), color = "red", size = 3) +
theme_minimal()
# Extract
theta <- extract(fit, permuted = FALSE, pars = "theta")
theta_combined <- extract(fit, pars = "theta")
# rhat
rhat = rstan::Rhat(theta[,,1])
cat("The Rhat for theta is", rhat, ", meaning that the chains have converged\n")
# Get the posterior mean and 95 % credible interval
mean = mean(theta)
q = quantile(theta, c(0.025, 0.975))
cat("The posterior mean is", mean, "and the 95 % credible interval is", q[1], "to", q[2], "\n")
```{r, message=FALSE, warning=FALSE}
library(rstan)
library(ggplot2)
library(loo)
mc.cores <- parallel::detectCores()
options(mc.cores = mc.cores)
# stan data with 11 success and 21 fails
stan_data = list(N = 30, y = c(rep(1, 11), rep(0, 21)))
# sample
fit <- rstan::sampling(log_model, data = stan_data, chains = 4, iter = 10000)
# Extract
theta <- extract(fit, permuted = FALSE, pars = "theta")
theta_combined <- extract(fit, pars = "theta")
# rhat
rhat = rstan::Rhat(theta[,,1])
# stan data with 11 success and 21 fails
stan_data = list(N = 32, y = c(rep(1, 11), rep(0, 21)))
# sample
fit <- rstan::sampling(log_model, data = stan_data, chains = 4, iter = 10000)
# Extract
theta <- extract(fit, permuted = FALSE, pars = "theta")
theta_combined <- extract(fit, pars = "theta")
# rhat
rhat = rstan::Rhat(theta[,,1])
cat("The Rhat for theta is", rhat, ", meaning that the chains have converged.\n")
# Extract
theta <- extract(fit, permuted = FALSE, pars = "theta")
theta_combined <- extract(fit, pars = "theta")
# rhat
rhat = rstan::Rhat(theta[,,1])
cat("The Rhat for theta is", rhat, ", meaning that the chains have converged.\n")
# Plot the posterior with mean and 95 % credible interval
ggplot(data.frame(theta = theta_combined), aes(x = theta)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black") +
geom_density(alpha = 0.2, fill = "lightblue") +
labs(title = "Posterior distribution of theta", x = "theta", y = "Density") +
geom_vline(xintercept = q[1], color = "red", linetype = "dashed") +
geom_vline(xintercept = q[2], color = "red", linetype = "dashed") +
geom_point(aes(x = mean, y = 0), color = "red", size = 3) +
theme_minimal()
# Get the posterior mean and 95 % credible interval
mean = mean(theta)
q = quantile(theta, c(0.025, 0.975))
cat("The posterior mean is", mean, "and the 95 % credible interval is", q[1], "to", q[2], ".\n")
# Plot the posterior with mean and 95 % credible interval
ggplot(data.frame(theta = theta_combined), aes(x = theta)) +
geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "lightblue", color = "black") +
geom_density(alpha = 0.2, fill = "lightblue") +
labs(title = "Posterior distribution of theta", x = "theta", y = "Density") +
geom_vline(xintercept = q[1], color = "red", linetype = "dashed") +
geom_vline(xintercept = q[2], color = "red", linetype = "dashed") +
geom_point(aes(x = mean, y = 0), color = "red", size = 3) +
theme_minimal()
# Plot the posterior with mean and 95 % credible interval
ggplot(data.frame(theta = theta_combined), aes(x = theta)) +
geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "pink", color = "black") +
geom_density(alpha = 0.2, fill = "pink") +
labs(title = "Posterior distribution of theta", x = "theta", y = "Density") +
geom_vline(xintercept = q[1], color = "red", linetype = "dashed") +
geom_vline(xintercept = q[2], color = "red", linetype = "dashed") +
geom_point(aes(x = mean, y = 0), color = "red", size = 3) +
theme_minimal()
# Plot the posterior with mean and 95 % credible interval
ggplot(data.frame(theta = theta_combined), aes(x = theta)) +
geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "purple", color = "black") +
geom_density(alpha = 0.2, fill = "pink") +
labs(title = "Posterior distribution of theta", x = "theta", y = "Density") +
geom_vline(xintercept = q[1], color = "red", linetype = "dashed") +
geom_vline(xintercept = q[2], color = "red", linetype = "dashed") +
geom_point(aes(x = mean, y = 0), color = "red", size = 3) +
theme_minimal()
# Plot the posterior with mean and 95 % credible interval
ggplot(data.frame(theta = theta_combined), aes(x = theta)) +
geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "purple", color = "black") +
geom_density(alpha = 0.2, fill = "purple") +
labs(title = "Posterior distribution of theta", x = "theta", y = "Density") +
geom_vline(xintercept = q[1], color = "red", linetype = "dashed") +
geom_vline(xintercept = q[2], color = "red", linetype = "dashed") +
geom_point(aes(x = mean, y = 0), color = "red", size = 3) +
theme_minimal()
# Plot the posterior with mean and 95 % credible interval
ggplot(data.frame(theta = theta_combined), aes(x = theta)) +
geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "pink", color = "black") +
geom_density(alpha = 0.2, fill = "purple") +
labs(title = "Posterior distribution of theta", x = "theta", y = "Density") +
geom_vline(xintercept = q[1], color = "red", linetype = "dashed") +
geom_vline(xintercept = q[2], color = "red", linetype = "dashed") +
geom_point(aes(x = mean, y = 0), color = "red", size = 3) +
theme_minimal()
# Plot the posterior with mean and 95 % credible interval
ggplot(data.frame(theta = theta_combined), aes(x = theta)) +
geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "pink", color = "black") +
geom_density(alpha = 0.2, fill = "lightblue") +
labs(title = "Posterior distribution of theta", x = "theta", y = "Density") +
geom_vline(xintercept = q[1], color = "red", linetype = "dashed") +
geom_vline(xintercept = q[2], color = "red", linetype = "dashed") +
geom_point(aes(x = mean, y = 0), color = "red", size = 3) +
theme_minimal()
